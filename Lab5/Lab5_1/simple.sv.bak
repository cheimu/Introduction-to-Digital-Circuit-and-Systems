module simple (clk, reset, w, out);
	input logic clk, reset, w;
	output logic out;
	// State variables.
	enum { A, B, C } ps, ns;

	// Next State logic
	always_comb
	 case (ps)
		 A: if (w) ns = B;
		 else ns = A;
		 B: if (w) ns = C;
		 else ns = A;
		 C: if (w) ns = C;
		 else ns = A;
	 endcase

	// Output logic - could also be another always, or part of above block.
	assign out = (ps == C);

	// DFFs
	always_ff @(posedge clk)
	 if (reset)
		ps <= A;
	 else
		ps <= ns;

endmodule 